services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: jarvis
      POSTGRES_USER: jarvis
      POSTGRES_PASSWORD: jarvis
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jarvis -d jarvis"]
      interval: 5s
      timeout: 3s
      retries: 30

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SESSION_SECRET=${SESSION_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FRONTEND_ORIGIN=${FRONTEND_ORIGIN}
      - ADMIN_USERNAMES=${ADMIN_USERNAMES:-admin}
      - ADMIN_EMAILS=${ADMIN_EMAILS:-admin@example.com}
      - ADMIN_DEFAULT_PASSWORD=${ADMIN_DEFAULT_PASSWORD:-changeme}
      - ADMIN_SEED_MODE=${ADMIN_SEED_MODE:-ensure}
      - INTEGRATION_PUSH_TOKEN=${INTEGRATION_PUSH_TOKEN:-prod-xyz-123}
      - SEED_ON_START=${SEED_ON_START:-false}
      - NODE_ENV=production
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      # - stt  # disabled to force cloud STT only

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      - VITE_WEBHOOK_URL=${VITE_WEBHOOK_URL}
      - VITE_CALLBACK_URL=${VITE_CALLBACK_URL}
      - VITE_SOURCE_NAME=${VITE_SOURCE_NAME}
      - VITE_BACKEND_URL=/
    ports:
      - "5173:80"
    depends_on:
      - backend

  # stt:
  #   build:
  #     context: ./stt
  #     dockerfile: Dockerfile
  #   environment:
  #     - WHISPER_MODEL=${WHISPER_MODEL:-base.en}
  #     - WHISPER_COMPUTE_TYPE=${WHISPER_COMPUTE_TYPE:-int8}
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '2.0'
  #   security_opt:
  #     - seccomp:unconfined
  #   ports:
  #     - "8000:8000"

volumes:
  db_data:
    # Pin to a stable name so data persists even if COMPOSE_PROJECT_NAME or folder changes
    # Override with DB_VOLUME_NAME in .env if you already have an existing named volume to reuse
    name: ${DB_VOLUME_NAME:-jarvis_db_data}
