generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(cuid())
  email        String?    @unique
  username     String     @unique
  passwordHash String
  role         String     @default("user") // 'user' | 'admin'
  status       String     @default("active") // 'active' | 'pending' | 'denied'
  createdAt    DateTime   @default(now())
  sessions     Session[]
  approvals    Approval[] @relation("UserApprovals")
  decided      Approval[] @relation("DecidedBy")
  interstellarRequests InterstellarRequest[] @relation("InterstellarRequestUser")
  interstellarDecisions InterstellarRequest[] @relation("InterstellarRequestDecidedBy")
  logs         ApiLog[]
  notes        Note[]
  studySets    StudySet[]
  roleplayScenarios RoleplayScenario[]
  roleplaySessions  RoleplaySession[]
  studyProgress     StudyProgress[]
  // AI Boards relations
  boards       Board[]
  aiProfile    AIProfile?
}

model Session {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
}

model Approval {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation("UserApprovals", fields: [userId], references: [id])
  status      String    @default("pending") // 'pending' | 'approved' | 'denied'
  decidedById String?
  decidedBy   User?     @relation("DecidedBy", fields: [decidedById], references: [id])
  decidedAt   DateTime?
  createdAt   DateTime  @default(now())
}

/// Simple key-value settings store for global flags
model Setting {
  key       String   @id
  value     String
  updatedAt DateTime @updatedAt
}

/// HTTP API request/response and error logs for admin observability
model ApiLog {
  id           String   @id @default(cuid())
  ts           DateTime @default(now())

  // Request context
  method       String
  path         String
  status       Int
  ok           Boolean
  durationMs   Int?
  ip           String?
  userAgent    String?

  // Associations
  userId       String?
  user         User?    @relation(fields: [userId], references: [id])

  // Payload previews (sanitized, truncated)
  requestBody  String?
  responseBody String?

  // Error details if any
  errorMessage String?
  errorStack   String?

  @@index([ts])
  @@index([path])
  @@index([status])
}

model InterstellarRequest {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation("InterstellarRequestUser", fields: [userId], references: [id])
  fullName    String
  status      String   @default("pending") // 'pending' | 'approved' | 'denied'
  decidedById String?
  decidedBy   User?    @relation("InterstellarRequestDecidedBy", fields: [decidedById], references: [id])
  decidedAt   DateTime?
  createdAt   DateTime @default(now())

  @@index([status])
  @@index([userId])
}

/// Notes captured/summarized in Jarvis Notes feature
model Note {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  transcript String
  notes      String
  title      String   @default("")
  pinned     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId, createdAt])
  @@index([createdAt])
  @@index([userId, pinned, createdAt])
}

/// Study sets generated for a subject/topic with optional linked notes
model StudySet {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  title        String
  subject      String?
  sourceText   String?
  tools        String[] @default([]) // e.g., ["guide","flashcards","test","match"]
  linkedNoteIds String[] @default([])
  content      Json     // { guide?: string, flashcards?: Flashcard[], test?: Question[], match?: Pair[] }
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  progressRecords StudyProgress[]
  /// Optional link back to the source study guide if this set was generated from another set's guide
  sourceGuideId String?
  sourceGuide   StudySet? @relation("StudySetSourceGuide", fields: [sourceGuideId], references: [id])
  derivedSets   StudySet[] @relation("StudySetSourceGuide")

  @@index([userId, createdAt])
  @@index([sourceGuideId])
}

/// Per-user progress tracking for study guides
model StudyProgress {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  studySetId      String
  studySet        StudySet @relation(fields: [studySetId], references: [id])
  sectionsCompleted String[] @default([])
  timeSpent       Int      @default(0) // minutes accumulated (future use)
  lastStudied     DateTime @updatedAt
  createdAt       DateTime @default(now())
  bookmarks       String[] @default([])

  @@unique([userId, studySetId])
  @@index([studySetId])
}

/// User-defined Roleplay scenarios and saved sessions
model RoleplayScenario {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  description String
  system      String   // system prompt
  rubric      String?  // optional rubric
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sessions    RoleplaySession[]

  @@index([userId, createdAt])
}

model RoleplaySession {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  scenarioId   String
  scenario     RoleplayScenario @relation(fields: [scenarioId], references: [id])
  messages     Json     // [{ role, content, at }]
  feedback     Json?    // { summary, scores }
  score        Float?   // optional aggregate score
  savedSetId   String?  // if exported to StudySet
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId, createdAt])
  @@index([scenarioId, createdAt])
}

/// Quiz summaries (post-game) persisted for later viewing
model QuizSummary {
  id               String   @id @default(cuid())
  roomId           String
  setId            String
  mode             String
  hostId           String?
  hostName         String?
  options          Json     // { questionTime, royaleLives, goldStealChance }
  finalLeaderboard Json     // [{ id, name, score, gold?, lives?, eliminated? }]
  rounds           Json     // [{ index, question, choices, correctIndex, counts, steals?, eliminated? }]
  createdAt        DateTime @default(now())

  @@index([createdAt])
  @@index([setId, createdAt])
}

/// Freeform visual boards for AI Boards feature
model Board {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  viewport  Json     // { x: number, y: number, zoom: number }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     BoardItem[]
  edges     BoardEdge[]

  @@index([userId, createdAt])
}

model BoardItem {
  id        String   @id @default(cuid())
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id])
  type      String   // 'note' | 'checklist' | 'link' | 'image' | 'group'
  x         Float
  y         Float
  w         Float
  h         Float
  z         Int      @default(0)
  rotation  Float    @default(0)
  content   Json     // varies by type
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

model BoardEdge {
  id        String   @id @default(cuid())
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id])
  sourceId  String
  targetId  String
  label     String?
  style     Json?
  createdAt DateTime @default(now())

  @@index([boardId])
}

/// Per-user AI personality profile for Board Agent
model AIProfile {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String   @default("Default")
  tone      String   @default("friendly")
  style     String   @default("concise")
  emotion   String   @default("calm")
  ttsVoice  String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

/// Vector memory store for long-term context (embeddings in Postgres for v1)
model VectorMemory {
  id         String   @id @default(cuid())
  userId     String
  boardId    String
  kind       String   // 'card' | 'summary' | 'agent' | 'intent'
  topic      String   @default("")
  summary    String   @default("")
  importance Int      @default(0)
  embedding  Float[]
  payload    Json
  createdAt  DateTime @default(now())

  @@index([userId, boardId])
}
