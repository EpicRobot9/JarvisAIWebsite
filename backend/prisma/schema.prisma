generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  passwordHash String
  role         String     @default("user") // 'user' | 'admin'
  status       String     @default("active") // 'active' | 'pending' | 'denied'
  createdAt    DateTime   @default(now())
  sessions     Session[]
  approvals    Approval[] @relation("UserApprovals")
  decided      Approval[] @relation("DecidedBy")
  logs         ApiLog[]
}

model Session {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
}

model Approval {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation("UserApprovals", fields: [userId], references: [id])
  status      String    @default("pending") // 'pending' | 'approved' | 'denied'
  decidedById String?
  decidedBy   User?     @relation("DecidedBy", fields: [decidedById], references: [id])
  decidedAt   DateTime?
  createdAt   DateTime  @default(now())
}

/// Simple key-value settings store for global flags
model Setting {
  key       String   @id
  value     String
  updatedAt DateTime @updatedAt
}

/// HTTP API request/response and error logs for admin observability
model ApiLog {
  id           String   @id @default(cuid())
  ts           DateTime @default(now())

  // Request context
  method       String
  path         String
  status       Int
  ok           Boolean
  durationMs   Int?
  ip           String?
  userAgent    String?

  // Associations
  userId       String?
  user         User?    @relation(fields: [userId], references: [id])

  // Payload previews (sanitized, truncated)
  requestBody  String?
  responseBody String?

  // Error details if any
  errorMessage String?
  errorStack   String?

  @@index([ts])
  @@index([path])
  @@index([status])
}
